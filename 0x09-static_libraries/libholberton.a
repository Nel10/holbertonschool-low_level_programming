#include "holberto.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

/**
 * _islower - show it lowercase
 * @c: variable
 * Return: 0
 */
int _islower(int c)
{
	if ((c >= 97) && (c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

/**
 * _isalpha - lowercase and uppercase
 * @c: The character to print
 * Return: 0
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

/**
 * _abs - numbers positives
 * @n: variable
 *
 * Return: 0
 */
int _abs(int n)
{
	int x;

	if (n < 0)
	{
		x = (-1) * n;
		return (x);
	}
	else
	{
		return (n);
	}
}

/**
 * _isupper -  checks for uppercase character
 * @c: variable
 * Return: 0
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: variable
 * Return: 0
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

/**
 * _strlen - returns the length of a string.
 * @s: pointer
 * Return: 0
 */
int _strlen(char *s)
{
	int x;

	x = 0;
	while (s[x] != '\0')
	{
		x++;
	}
	return (x);
}

/**
 * _puts - prints a string
 * @str: pointer
 * Return: 0
 */
void _puts(char *str)
{
	int x;

	for (x = 0; str[x] != '\0'; x++)
	{
		_putchar(str[x]);
	}
	_putchar('\n');
}

/**
 * _strcpy - copies the string
 * @dest: destiny
 * @src: string, pointer
 * Return: 0
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
		dest[i] = src[i];
	dest[i] = '\0';
	return (dest);
}

/**
 * _atoi - convert a string to an integer.
 * @s: pointer
 * Return: 0
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int numb = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			numb = (numb * 10) + (*s - '0');
		else if (numb > 0)
			break;
	} while (*s++);
	return (numb * sign);
}

/**
 * *_strcat - function that concatenates two strings.
 * @dest: pointer
 * @src: pointer
 * Return: 0
 */
char *_strcat(char *dest, char *src)
{
	int x, y;

	for (x = 0; dest[x]; x++)
		;
	for (y = 0; src[y]; y++)
	{
		dest[x] = src[y];
		x++;
	}
	dest[x] = '\0';
	return (dest);

}

/**
 * *_strncat - function that concatenates two strings.
 * @dest: pointer
 * @src: pointer
 * @n: variable
 * Return: 0
 */
char *_strncat(char *dest, char *src, int n)
{
	int x, y;

	for (x = 0; dest[x]; x++)
		;
	for (y = 0; src[y] && n > 0; y++, n--)
	{
		dest[x] = src[y];
		x++;
	}
	return (dest);
}

/**
 * *_strncpy - function that copies a string.
 * @dest: pointer
 * @src: pointer
 * @n: variable
 * Return: 0
 */
char *_strncpy(char *dest, char *src, int n)
{
	int x;

	for (x = 0; x < n && src[x] != '\0'; x++)
		dest[x] = src[x];
	for (; x < n; x++)
		dest[x] = '\0';
	return (dest);
}

/**
 * _strcmp - function that compares two strings
 * @s1: pointer
 * @s2: pointer
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int x;

	for (x = 0; s1[x] != '\0' && s2[x] != '\0' && s1[x] == s2[x]; x++)
		;
	return (s1[x] - s2[x]);
}

/**
 * _memset - function that fills memory with a constant byte
 * @s: pointer
 * @b: variable
 * @n: stored bytes
 * Return: 0
 */
char *_memset(char *s, char b, unsigned int n)

{
	unsigned int a;

	for (a = 0; a < n; a++)
		s[a] = b;
	return (s);
}

/**
 * _memcpy - copies a memory area
 * @dest: pointer
 * @src: pointer
 * @n: variable
 * Return: 0
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(dest + i) = src[i];
	return (dest);
}

/**
 * _strchr - Function that locates a char in a string
 * @s: pointer
 * @c: variable
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int x;

	for (x = 0; s[x] >= '\0'; x++)
	{
		if (s[x] == c)
			return (s + x);
	}
	return ('\0');
}

/**
 * _strspn - the length of a prefix substring.
 * @s: pointer
 * @accept: pointer
 * Return: 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int x = 0, i, j = 0;

	while (accept[x])
	{
		i = 0;
		while (s[i] != 32)
		{
			if (accept[x] == s[i])
			{
				j++;
			}
			i++;
		}
		x++;
	}
	return (j);
}

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: pointer
 * @accept: pointer
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	int x = 0, y;

	while (s[x])
	{
		y = 0;
		while (accept[y])
		{
			if (s[x] == accept[y])
			{
				s += x;
				return (s);
			}
			y++;
		}
		x++;
	}
	return ('\0');
}

/**
 * _strstr -  locates a substring.
 * @haystack:pointer
 * @needle: pointer
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	int x;

	if (*needle == 0)
		return (haystack);
	while (*haystack)
	{
		x = 0;
		if (haystack[x] == needle[x])
		{
			do {
				if (needle[x + 1] == '\0')
					return (haystack);
				x++;
			} while (haystack[x] == needle[x]);
		}
		haystack++;
	}
	return ('\0');
}
